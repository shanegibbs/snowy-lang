%skeleton "lalr1.cc"
%require  "3.0"
%debug
%defines
%define api.namespace {Snowy}
%define parser_class_name {ProgramParser}
%define parse.error verbose

%code requires { /* code for the defines/header file */
#include <memory>

#include <Args.h>
#include <ArgsDecl.h>
#include <BoolLiteral.h>
#include <Call.h>
#include <Comp.h>
#include <DeclareVar.h>
#include <FuncDecl.h>
#include <FuncDef.h>
#include <DeclareClass.h>
#include <Expression.h>
#include <Ident.h>
#include <IfCond.h>
#include <IntLiteral.h>
#include <Operator.h>
#include <Node.h>
#include <Statement.h>
#include <StringLiteral.h>
#include <Tuple.h>
#include <Type.h>

namespace Snowy {
   class Driver;
}

}

%parse-param { Driver *driver }

%code { /* goes into the impl of Parser */
  #include <string>
  #include <iostream>
  #include <cstdlib>
  #include <fstream>

  #include <Log.h>

  /* So we can call Driver functions */
  #include "Driver.h"

  /* because we want the tokens that the parser generates */
  #include "ProgramParser.h"

  /* The parser calls back to the driver using this macro */
  #define yylex driver->mylex
}

/* token types. Also used by the lexer */
%union {
  Snowy::Args *args;
  Snowy::ArgsDecl *args_decl;
  Snowy::Call *call;
  Snowy::DeclareVar *declare_var;
  Snowy::FuncDecl *func_decl;
  Snowy::FuncDef *declare_func;
  Snowy::DeclareClass *declare_class;
  Snowy::Expression *expression;
  const Snowy::TypePtr *type;
  Snowy::Ident *ident;
  Snowy::IntLiteral *int_literal;
  Snowy::Node *node;
  Snowy::Operator *oper;
  Snowy::Statement* statement;
  Snowy::StringLiteral* string_literal;
  Snowy::Tuple* tuple;
  Snowy::IfCond *ifCond;
  Snowy::Comp *comp;
  char* character;
  const std::shared_ptr<const string> *str;
  int token;
}

%token <str> ID
%token <str> INTEGER
%token <str> STRING_LIT
%token <str> BOOL_LIT
%token <str> ENDL
%token <token> EQ_OP
%token <str> OP
%token <str> COMP_OP
%token <token> COMMA
%token <token> OPEN_BRACKET
%token <token> CLOSE_BRACKET
%token <token> SEPERATOR
%token <token> DO
%token <token> IF
%token <token> END
%token <token> CLASS
%token <token> DEF
%token <token> DECLARE
%token <token> COMMENT
%token <token> WHITE_SPACE
%token <token> UNRECOGNIZED_CHAR

%type <node> program
%type <node> block
%type <declare_class> class_body
%type <node> node
%type <type> type
%type <ident> ident
%type <call> call
%type <args> args
%type <args_decl> args_decl
%type <oper> op
%type <expression> expr
%type <declare_var> var_decl
%type <func_decl> func_decl
%type <declare_func> func_def
%type <declare_class> class_decl
%type <statement> stmt
%type <tuple> tuple
%type <ifCond> if_cond
%type <comp> comp

%left OP
%left UOP

%%

program: program node { $1->setNext($2); $$ = $2; }
    | node { driver->setRoot($1); }
    ;

optional_endl:
    | endl

endl: endl ENDL
    | ENDL
    ;

node: optional_endl stmt endl { $$ = $2; }
    | optional_endl expr endl { $$ = $2; }
    ;

stmt: var_decl { $$ = $1; }
    | func_decl { $$ = $1; }
    | func_def { $$ = $1; }
    | if_cond { $$ = $1; }
    ;

var_decl: ident EQ_OP expr { $$ = new Snowy::DeclareVar($1, $3); }
    ;

type: ID { $$ = driver->getType(*$1); delete $1; }
    ;

ident: type SEPERATOR ID {
      $$ = new Snowy::Ident(*$3, *$1);
      delete $1;
      delete $3;
    }
    | ID { $$ = new Snowy::Ident(*$1); delete $1; }
    ;

op: OP { $$ = new Snowy::Operator(*$1); delete $1; }
    ;

tuple: expr op expr %prec UOP { $$ = new Snowy::Tuple($1, $2, $3); }
    ;

call: ident OPEN_BRACKET args CLOSE_BRACKET { $$ = new Call(driver->toFunc($1), $3); }
    ;

block: { $$ = NULL; }
    | block node { $1->setNext($2); $$ = $2; }
    | node { $$ = $1; }
    ;

class_decl: CLASS type DO endl class_body END { $5->setType(*$2); $$ = $5; delete $2; }
    ;

class_body: { $$ = new DeclareClass(); }
    | class_body func_def endl { $$->addFuncDecl($2); }
    | class_body var_decl endl { $$->addVarDecl($2); }
    ;

comp: expr COMP_OP expr { $$ = new Comp($1, *$2, $3); delete $2; }

func_decl: DECLARE ident OPEN_BRACKET args_decl CLOSE_BRACKET { $$ = new FuncDecl($2, $4); driver->registerFunc($$); }

func_def: DEF ident OPEN_BRACKET args_decl CLOSE_BRACKET DO endl block END { $$ = new FuncDef($2, $4, $8); driver->registerFunc($$); }

if_cond: IF OPEN_BRACKET expr CLOSE_BRACKET endl block END { $$ = new IfCond($3, $6); }

expr: INTEGER { $$ = new Snowy::IntLiteral(*$1); delete $1; }
    | STRING_LIT { $$ = new Snowy::StringLiteral(*$1); delete $1; }
    | BOOL_LIT { $$ = new Snowy::BoolLiteral(*$1); delete $1; }
    | OPEN_BRACKET tuple CLOSE_BRACKET { $$ = $2; }
    | tuple { $$ = $1; }
    | call { $$ = $1; }
    | ident { $$ = $1; }
    | class_decl { $$ = $1; }
    | comp { $$ = $1; }
    ;

args: { $$ = new Args; } // blank
    | expr { $$ = new Args($1); }
    | args COMMA expr { $1->addArg($3); }
    ;

args_decl: { $$ = new ArgsDecl; } // blank
    | ident { $$ = new ArgsDecl($1); }
    | args_decl COMMA ident { $1->addIdent($3); }
    ;

%%

void
Snowy::ProgramParser::error( const std::string &err_message )
{
   const char* err = err_message.c_str();
   char* err_cpy = (char*)malloc(strlen(err) + 1);
   strcpy(err_cpy, err);
   driver->error(err_cpy);
}
