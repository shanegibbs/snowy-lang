%skeleton "lalr1.cc"
%require  "3.0"
%debug
%defines
%define api.namespace {Snowy}
%define parser_class_name {Parser}

%code requires { /* code for the defines/header file */
#include <Nodes/DeclareVar.h>
#include <Nodes/Expression.h>
#include <Nodes/Ident.h>
#include <Nodes/IntLiteral.h>
#include <Nodes/Node.h>
#include <Nodes/Statement.h>
#include <Nodes/Tuple.h>

namespace Snowy {
   class Driver;
}

}

%parse-param { Driver *driver }

%code { /* goes into the impl of Parser */
   #include <iostream>
   #include <cstdlib>
   #include <fstream>

  /* So we can call Driver functions */
  #include <Parser/Driver.h>

  /* because we want the tokens that the parser generates */
  #include "Parser.h"

  /* The parser calls back to the driver using this macro */
  #define yylex driver->mylex
}

/* token types. Also used by the lexer */
%union {
  Snowy::Node *node;
  Snowy::Ident *ident;
  Snowy::NumOp num_op;
  char* character;
  const char* string;
  Snowy::Expression *expression;
  Snowy::Statement* statement;
  int token;
  Snowy::IntLiteral *int_literal;
  Snowy::DeclareVar *declare_var;
}

%token <string> ID
%token <string> INTEGER
%token <string> ENDL
%token <token> EQ_OP
%token <character> NUM_OP
%token <token> COMMA

%type <node> node
%type <ident> ident
%type <num_op> num_op
%type <expression> expr
%type <declare_var> var_decl
%type <statement> stmt

%%

program: node
       ;

node: stmt ENDL { puts("opal_set_root((Snowy::Node*)$1);"); }
     | node stmt ENDL { printf("{stmt}\n"); }
     | expr ENDL { puts("opal_set_root((Snowy::Node*)$1);"); }
     | node expr ENDL { puts("$$ = (Snowy::Node*)$2; opal_add_node($1, (Snowy::Node*)$2);"); }
     ;

stmt: var_decl { $$ = (Snowy::Statement*)$1; }
    ;

var_decl: ident EQ_OP expr { puts("$$ = new Snowy::DeclareVar($1, $3);"); }
        ;

ident : ID { $$ = new Snowy::Ident($1); }
      ;

num_op: NUM_OP { puts("$$ = opal_num_op_from_string($1);"); }
      ;

expr: INTEGER { $$ = new Snowy::IntLiteral($1); }
    | expr num_op expr { $$ = new Snowy::Tuple($1, $2, $3); }
    | ident args { printf("{method call}\n"); }
    ;

args: // blank
    | expr
    | ident COMMA expr

%%

void
Snowy::Parser::error( const std::string &err_message )
{
   std::cerr << "Snowy Parser Error: " << err_message << "\n";
}
